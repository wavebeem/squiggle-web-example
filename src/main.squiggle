let React = require("react")

let RE = React.createElement

let String = global.String
let Object = global.Object
let document = global.document

def unicode(codepoint) =
    String.fromCharCode(parseInt(codepoint, 16))

let CHAR_EMPTY = unicode("B7")
let CHAR_PLAYER = "@"

def rangeDo(a, b, f) =
    if a < b
        then do
            f(a);
            rangeDo(a + 1, b, f);
        end
        else undefined

def rangeMap(a, b, f) =
    freezeAfter(Array(), fn(xs)
        rangeDo(a, b, fn(i) xs.push(f(i))))

def hashCoord(x, y) =
    [x, y].join(",")

def makeRoom(w, h) =
    freezeAfter(Object(), fn(room) do
        rangeDo(0, w, fn(x)
            rangeDo(0, h, fn(y)
                set(room, hashCoord(x, y), undefined)
            )
        );
        set(room, "width", w);
        set(room, "height", h);
    end)

def classes(cs) =
    # Ugh, fix this parse issue.
    (filter(cs, Boolean)).join(" ")

def dispatchEvent(event) =
    let root = app.root
    let state = root.state
    let newState =
        match event
        case {type: "Key", code} => handleKey(state, code)
        case {type: "Tick"} => handleTick(state)
        end
    in root.setState(newState)

def handleTick(state) =
    state ~ {blink: not state.blink}

def handleKey(state, code) =
    let x = state.x
    let y = state.y
    let delta =
        match code
        case (K.W) => {y: y - 1}
        case (K.A) => {x: x - 1}
        case (K.S) => {y: y + 1}
        case (K.D) => {x: x + 1}
        end
    in state ~ delta

let Clickhole =
    def componentDidMount(@this) =
        let elem = React.findDOMNode(this)
        in elem.focus()
    # Probably not the nicest thing for this parameter, but I'm unhappy to be
    # passed data that seems to be undocumented?
    def onKeyPress(@this, event, _someReactGarbage) =
        let e = {
            type: "Key",
            code: event.which
        }
        in do
            event.preventDefault();
            dispatchEvent({type: "Key", code: event.which});
        end
    def render() =
        RE("textarea", {
            className: "clickhole",
            onKeyPress
        })
    let proto = {
        displayName: "Clickhole",
        componentDidMount,
        render,
        onKeyPress
    }
    in React.createClass(proto)

let GameView =
    let state = {
        x: 0,
        y: 0,
        blink: false,
        room: makeRoom(40, 20)
    }
    def render(@this) =
        let model = this.state
        # let _ = console.log(model)
        in RE("main", null,
            RE("table", {className: "game-view"},
                RE("tbody", null, renderedCellsFor(model))
            ),
            RE("div", {className: "game-log"}, Date()),
            RE(Clickhole)
        )
    def getInitialState() = state
    let proto = {
        displayName: "GameView",
        render,
        getInitialState
    }
    in React.createClass(proto)

def renderCell(x, y, model, occupant) =
    let t = occupant.type
    let c = if t == "Player"
        then CHAR_PLAYER
        else CHAR_EMPTY
    let className = classes([
        "game-cell",
        "has-" ++ t.toLowerCase(),
        if model.blink and t == "Player"
            then "is-blinking"
            else ""
    ])
    let props = {
        key: hashCoord(x, y),
        className
    }
    in RE("td", props, c)

def renderedCellsFor(model) =
    let w = model.room.width
    let h = model.room.height
    in rangeMap(0, h, fn(y)
        let key = String(y)
        in RE("tr", {key, className: "game-row"},
            rangeMap(0, w, fn(x)
                let occupant = {
                    type: if x == model.x and y == model.y
                        then "Player"
                        else "Empty"
                }
                in renderCell(x, y, model, occupant)
            )
        )
    )

let app = Object()

let K = {
    W: 119,
    A: 97,
    S: 115,
    D: 100
}

def tick() =
    do
        dispatchEvent({type: "Tick"});
        setTimeout(tick, 300);
    end

def focusClickhole(_event) =
    let elem = document.querySelector(".clickhole")
    in elem.focus()

def start() =
    let body = document.body
    let root = React.createElement(GameView)
    let container = document.getElementById("react-container")
    let thing = React.render(root, container)
    in do
        set(app, "root", thing);
        body.addEventListener("click", focusClickhole);
        tick();
    end

in start()
