let (
    h = require("virtual-dom/h"),
    diff = require("virtual-dom/diff"),
    patch = require("virtual-dom/patch"),
    createElement = require("virtual-dom/create-element"),
    Object = global.Object,
    String = global.String,
    setInterval = global.setInterval,
    document = global.document,
    px = fn(n) String(n) ++ "px",
    render = fn(state) h("div", {"className": "box"}, [String(state.count)]),
    app = Object(),
    start = fn() do {
        set("state", {"count": 0}, app);
        set("tree", render(app.state), app);
        set("root", createElement(app.tree), app);
        (document.body).appendChild(app.root);
        setInterval(update, 1000);
    },
    update = fn()
        let (
            newState = app.state ~ {"count": app.state.count + 1},
            newTree = render(newState),
            patches = diff(app.tree, newTree),
            newRoot = patch(app.root, patches)
        ) do {
            set("state", newState, app);
            set("root", newRoot, app);
            set("tree", newTree, app);
        }
) start()

# var h = require('virtual-dom/h');
# var diff = require('virtual-dom/diff');
# var patch = require('virtual-dom/patch');
# var createElement = require('virtual-dom/create-element');
#
# // 1: Create a function that declares what the DOM should look like
# function render(count)  {
#     return h('div', {
#         style: {
#             textAlign: 'center',
#             lineHeight: (100 + count) + 'px',
#             border: '1px solid red',
#             width: (100 + count) + 'px',
#             height: (100 + count) + 'px'
#         }
#     }, [String(count)]);
# }
#
# // 2: Initialise the document
# var count = 0;      // We need some app data. Here we just store a count.
#
# var tree = render(count);               // We need an initial tree
# var rootNode = createElement(tree);     // Create an initial root DOM node ...
# document.body.appendChild(rootNode);    // ... and it should be in the document
#
# // 3: Wire up the update logic
# setInterval(function () {
#       count++;
#       var newTree = render(count);
#       var patches = diff(tree, newTree);
#       rootNode = patch(rootNode, patches);
#       tree = newTree;
# }, 1000);
