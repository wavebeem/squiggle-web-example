let React = require "react"
let Model = require "./model"
let {Clickhole} = require "./clickhole"
let {hashCoord, rangeMap, classes} = require "./util"
let {Date, String} = global
let RE = React.createElement

let CHAR_EMPTY = "\u{B7}"
let CHAR_PLAYER = "@"

def renderCell(x, y, model, occupant) do
    let t = occupant.type
    let c =
        if t == "Player"
        then CHAR_PLAYER
        else CHAR_EMPTY
        end
    let blink =
        if model.blink and t == "Player"
        then "is-blinking"
        else ""
        end
    let className =
        classes([
            "game-cell",
            "has-" .. t.toLowerCase(),
            blink
        ])
    let key = hashCoord(x, y)
    let props = {key, className}

    RE("td", props, c)
end

def renderedCellsFor(model) do
    let {width, height} = model.room
    rangeMap(0, height, fn(y) do
        let key = String(y)
        let className = "game-row"
        let kids = rangeMap(0, width, fn(x) do
            let type =
                if x == model.x and y == model.y
                then "Player"
                else "Empty"
                end
            let occupant = {type}
            renderCell(x, y, model, occupant)
        end)
        RE("tr", {key, className}, kids)
    end)
end

def render(@this) do
    RE("main", null,
        RE("table", {className: "game-view"},
            RE("tbody", null, renderedCellsFor(this.state))
        ),
        RE("div", {className: "game-log"}, Date()),
        RE(Clickhole)
    )
end

def getInitialState() do
    Model.initialState
end

let displayName = "GameView"

let proto = {
    displayName,
    getInitialState,
    render
}

let GameView = React.createClass(proto)

export GameView
